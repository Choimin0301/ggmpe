메뉴
File: 10번째  Build Settings =  프로젝트를 빌드 가능 (여기서 빌드란 PC버전에서는exe파일 안드로이드는 apk파일 실행할 수있는 파일을 생성)
Edit : 현재 프로젝트에 다양한 설정을 할 수 있음 Project Settings 에서 오디오나 단축키, 그래픽 옵션, 물리 등 현재 프로젝트에 필요한 다양한 설정들을 할 수 있음
Assets : 잘 사용은 안함(Import Paxkage나 Export Package Package 파일을 생성하거나 삭제할 수 있음 *패키지란 유니티 내부에 있는 여러 개의 파일을 하나로 묶어서 다른 사람에게 전달하는것 내가 전달 할 때는Export Package, 전달 받은 패키지 파일을 열 때는 Import Package사용)
GameObject : 하나의 물체 사물을 뜻함
Component : 게임 오브젝트에 부착해서 사용하는 하나의 속성이다(물리, 사운드 재생, 충돌 박스, 화면에 보여지는 랜더링 등 하나하나의 속성이 들어있는데 이것을 게임 오브젝트에 부착을 해서 사용함)
Window : 뒤 편에 보이는 뷰들, 뷰를 열 수 있는 메뉴이다(General보면 씬 게임 인스펙터 등 뷰들이 메뉴로 존재함 그 외에도 다양한 용도에 따라서 뷰 정보들이 나오게 됨 하나를 선택해서 열게되면 새로운 뷰가 열리게 됨)

툴바
맨 왼쪽
메뉴 아래에 존재하고 
--->
위 화살표 순서대로
TransForm Tools (Scene View)
--->
위 화살표 순서대로
순차적으로 화면이동(Q), 오브젝트 이동(W), 오브젝트 회전(E), 오브젝트 크기(R), 자유변형(T), 이동/회전/크기 동시 설정(Y), 커스텀 툴
Transform Gizmo Toggles (Scene View)
--->
위 화살표 순서대로
오브젝트의 중심점 설정 (Pivot / Center) (Z)
오브젝트 회전 기준 설정 (Local / Global) (X)

중간
--->
위 화살표 순서대로
Play : 게임 실행 (Ctrl + P)
Pause : 게임 일시 정지 (Ctrl + Shift + P)
Step : Step 실행 (Pause 일 때 사용) (Ctrl + Alt + P)

맨 오른쪽
--->
위 화살표 순서대로
Cloud Button
- Unity Services View Open

Account Drop-down
-유니티 계정 정보 (로그인 / 로그아웃)

Layers Drop-down (Scene View)
- Scene View의 게임 오브젝트 제어 (화면에 보여지는지, 선택가능한지)

Layout Drop-down
- 나만의 View 레이아웃을 저장, 삭제, 선택 가능

화면 이동 : 마우스 휠 버튼 클릭 후 드래그
화면 회전 : Alt + 마우스 왼쪽 버튼 클릭 후 드래그 마우스 오른쪽 버튼 클릭 후 드래그
확대 / 축소 : Alt + 마우스 오른쪽 버튼 클릭 후 드래그 마우스 휠 버튼 앞/뒤 드래그
비행 모드 
전, 후, 좌, 우 : 마우스 오른쪽 버튼 + W, A, S, D(or 방향키)
상승/하강 : 마우스 오른쪽 버튼 + Q, E
빠른 이동 : Shift + "전, 후, 좌, 우" or  "상승/하강"
선택된 오브젝트로 화면 이동 : F

Unity3D Asset File Format
Image Files 
 -bmp, tif, tga, jpg, psd와 같이 가장 일반적인 이미지 파일 형식을 지원
 -포토샵(*.psd)파일을"Assets 폴더"에 저장하면 병합된 이미지로 가져옴
3D Model, Animation Files
 -가장 일반적인 3D 소프트웨어의 기본 파일(*.max, *.blend, *.mb, *ma, etc...)을 "Assets 폴더"에 저장하면 유니티에서 새로 로드해서 저장하게 된다
 -대부분의 3D 소프트웨어에서 제작한 파일을 가져올 수 있다(호환성 문제로 폴리곤 정조는 유지되지만 맵핑 정보는 유지되지 않는 경우가 많다)
Audio Files
 -오디오 파일을 "Assets 폴더"에 저장하면 지정된 압축 설저에 따라 가져옴
Unity의 Assets 폴더로 들어온 에셋은 압축, 수정 또는 처리하는 다양한 방법에 따라 변형되어 사용된다(유니티 내부에서만 변형되고, 원본 자체가 변형되진 않음) 

 Unity3D 기본 용어
-프로젝드 (Project)
--하나의 게임, 콘텐츠, 어플리케이션을 뜻한다

-씬 (Scene)
--게임의 장면이나 상태를 저장하는 단위
--하나의 거대한 게임을 씬 단위로 관리하며, 코드를 이용해 이동이 가능하다

-Sprite Renderer 컴포넌트 : 2차원의 이미지를  화면에 출력
-Mesh Renderer 컴포넌트 : 3차원의 오브젝트(물체)를 화면에 출력

-Audio Source 컴포넌트 : AudioClip 변수에 등록된 사운드 에셋을 재생

-게임 오브젝트 (GameObject)
--씬에 배치되는 하나의 물체를 지칭하는 단위
---모든 게임 오브젝트는 위치/회전/크기를 제어하는 "Transform"컨초넌트를 가지고 있다
---게임 오브젝트는 컴포넌트를 묶어서 관리하고, 접근할 수 있는 수단
--게임 오브젝트에 원하는 컴포넌트를 추가하여 다양한 오브젝트 제작 가능

-컴포넌트 (Component) [C# Script]
--게임 오브젝트에 부착할 수 있는 C# 스크립트 파일을 지칭하는 단위
--게임 오브젝트에 컴포넌트를 부착하여 게임 오브젝트에 여러 기능을 부여

-에셋 (Asset)
--프로젝트 내부에서 사용하는 모든 리소스를 지칭하는 단이 (Project View)
--Audio, 3D Model, Animation, Texture, Script, Prefab, Etc...

-프리팹 (Prefab)
--Hierarchy View에 있는 게임 오브젝트를 파일 형태로 저장하는 단위
--주로 게임 중간에 생성되는 게임 오브젝트를 프리팹으로 저장해두고 사용한다
--프리팹의 장점
---동일한 게임 오브젝트를 여러 Scene이나 게임 월 특정 장소에 배치할 때 Project View에 저장되어 있는 프리팹을 Drag & Drop하여 배치할 수 있다
---기획상의 변경이 있을 때 프리팹 원본을 갱신하게 되면 모든 씬에 복사되어 배치된 게임 오브젝트들도 원본과 동일하게 업데이트 된다

게임 오브젝트 메뉴
-많이 사용되는 게임 오브젝트들을 생성할 수 있도록 메뉴화 하여 제공

빈 오브젝트(Empty Object)
-모든 오브젝트가 가지는 "Transform"컴포넌트만 붙어있는 오브젝트

3D Object
-게임 화면에 배치할 수 있는 3D 오브젝트

Cube
-한 변의 길이가 1이고, 6개의 면으로 이루어진 육면체
-텍스처를 적용하면 모든 면에 동일한 이미지가 표현된다

2D Object
-게임 화면에 배치할 수 있는 2D 오브젝트

Sprite
-게임 화면에 2D 이미지를 보이게 하는 게임 오브젝트

Effect 
-게임에 사용되는 여러 효과, 무기의 잔상, 선 그리기와 같은 오브젝트들

Audio
-게임 내에서 재생되는 사운드와 관련된 오브젝트들

Video
-동영상을 재생하는 오브젝트

UI
-사용자가 게임과 상호작용 할 수 있는 GUI 오브젝트들

Camera
-플레이어가 게임 월드를 볼 수 있는 눈 역할을 담당한다
*Clear Flags
-오브젝트가 존재하지 않는 빈 배경을 어떻게 채울지 결정하는 요소
--주로 2D 게임은 Solid Color, 3D 게임은 Skybox를 사용
--카메라를 동시에 여러 대 사용할 때 Depth only, Don't Clear 옵션도 사용
-- Depth only or Don't Clear라고 되어 있을 때 오브젝트를 움직이면 잔상이 생기게 된다
*Background
-Clear Flags가 "Solid Color" 일 때 배경화면의 색상을 나타내는 변수

Projection
-카메라의 시점을 나타내며, 2D와 3D 시점이 존재한다

Clipping Planes
-카메라가 오브젝트를 볼 수 있는 시야 거리
-Near는 시작 지점(default 0.3), Far는 끝 지점(default 1000)
-Far 거리를 늘리면 카메라가 볼 수 있는 시야 거리가 늘어난다
--단, 시야가 늘어나는 만큼 그리는 오브젝트 수가 많아져 성능에 영향을 미칠 수 있다

Viewport Rect
-카메라가 본 것을 화면에 출력하는 영역 설정(min 0, max 1)
-x, y는 출력을 시작하는 위치 좌표, width, height는 출력하는 화면 크기

Pendering Path
-카메라에 의해 그려지는 방법
Occlusion Culling
-오브젝트 뒤에 오브젝트가 배치되어 카메라의 시선에 보이지 않을 경우 해당 오브젝트를 그리지 않도록 해 게임의 처리 속도를 높여주는 기능
HDR
-눈부심9Bloom)이나 글로우(Glow)같은 조명 효과를 낸다
MSAA
-Anti-Aliasing 사용. 높은 해상도의 그림을 낮은 해상도에서 나타낼 때 계단현상이 생기는 것
Allow Dynamic Resolution
-동적 해상도 지원 여부
Target Display
-카메라가 최대 8개의 서로 다른 모니터에 카메라에 보여지는 화면을 출력할 수 있음

Light
-현실세계의 빛 역할을 담당한다
--빛을 이용하해 모델의 재질이나 색상을 다양한 형태로 보여주는데 사용된다

Tip. 완전한 암흑 공간을 만들고 싶을 때
-메뉴에서 Window - Rendering - Lighting Settings를 선택해 Lighting View를 열어서 환경광과 주변광을 어둡게 설정
-카메라의 Clear Flags를 어두운 검은 화면으로 설정

Type
-Directional Light 
--오브젝트의 위치, 크기가 중요하지 않고, 방향이 중요한 빛으로 게임 월드에 존재하는 모든 오브젝트에게 동일한 방향으로 빛을 제공한다

-Point Light
--Range 변수에 설정된 값 만큼 구 형태로 방사되는 빛
--주변을 밝게 만드는 전구, 모닥불과 같은 곳에 사용한다

-Spot Light
--Range, Spot Angle 변수에 설정된 값 만큼 원뿔 형태로 뻗어나가는 빛
--오브젝트를 강조해서 비출 떄나 가로등과 같은 곳에서 사용한다

-Area Light
--오브젝트의 위치를 기준으로 전방 방향으로만 방출되는 빛
--Area Light는 Baked 모드에서만 사용 가능하다

Mode
-빛의 연산을 실시간으로 할지 미리 계산해두고 쓸지 결정하는 옵션
-Realtime
--빛이 비췄을 때의 밝기, 그림자 등의  연산을 실시간으로 함
--장점 : 게임 실행 중에도 빛의 이동이나 회전에 따라 환경이 변화됨
단점 : 연산량이 많아 게임의 최적화에 큰 지장을 줌
-Mixed
--Realtime과 Baked를 섞어서 사용
-Baked
--현재 상태로 빛 연산을 해두고 활용
--장점 :  연산을 미리 해두고 사용하기 때문에 최적화가 잘 되어있음
--단점 : 게임 실행 중에 빛이 이동/회전해도 반영되지 않음

-빛이 Baked 모드일 때 설정해야 하는 것들
-- 빛의 영향을 받을 게임 오브젝트의 Static 옵션을 설정
--Window - Rendering - Lighting Settings에서 "Generate Lighting"으로 빛 데이터 Baked 하기

-Intensity
--빛의 세기를 나타내는 수치로 높을 수록 빛의 게시가 세진다

-Shadow Type
--빛을 받은 오브젝트의 그림자 설정

-Cookie & Cookie Size
--Cookie에 등록된 Texture 모양, Cookie Size 크기의 빛 생성

-Draw Halo
--빛 주변으로 후광 효과 생성

-Flare
--빛의 효과에 대한 모습

-Render Mode
--중요한 빛과 중요하지 않은 빛을 구분
--옵션
---자동 (Auto)
---중요 (Important)
---중요하지 않음 (Not Important)

-Culling Mask
--해당 레이어에 빛을 적용할지 적용하지 않을지 설정
--선책 해제된 레이어는 해당 빛의 영향을 받지 않는다

3D 오브젝트에 이미지를 출력하는 방법
1. 사용할 이미지 에셋의 Texture Type을 default로 설정
2. Project View에서 Material 에셋 생성
3.Material 에셋에 이미지 에셋 등록
4.GameObject - 3D Object - 원하는 오브젝트 생성
5.생성된 오브젝트의 Mesh Renderer 컴포넌트에 있는 mateials 변수에 material 에셋 등록



  
